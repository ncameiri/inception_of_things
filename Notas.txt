
Instalar no browser app tipo ModHeader

p1

boxes images
https://portal.cloud.hashicorp.com/vagrant/discover?architectures=amd64&next=CixXeUl5TURJMExURXhMVEkwVkRBeE9qUXhPalV4TGpZek5UTTVNVm9pWFE9PQ%3D%3D&providers=virtualbox&query=ubuntu&sort=updated_at%20desc
Alterar setup Vbox -  https://www.thisprogrammingthing.com/2013/changing-the-directory-vagrant-stores-the-vms-in/

levantar com -> vagrant up

vagrant ssh dmarceliS

https://developer.hashicorp.com/vagrant/tutorials/getting-started/getting-started-index
https://www.exxactcorp.com/blog/HPC/building-a-kubernetes-cluster-using-vagrant

cat /etc/vbox/networks.conf
* 172.42.42.100/16 192.168.0.0/16
* 2001::/64

https://www.virtuozzo.com/company/blog/scaling-kubernetes/


https://www.letscloud.io/community/how-to-install-kubernetesk8s-and-docker-on-ubuntu-2004
https://docs.tigera.io/calico/latest/getting-started/kubernetes/self-managed-onprem/onpremises
kubectl create deployment nginx --image=nginx

https://spacelift.io/blog/kubernetes-ingress
https://stackoverflow.com/questions/44110876/kubernetes-service-external-ip-pending

Ordem das Taks:
Master:
1-preparation.sh
2-bootstrap_kmaster.sh



Workers:
1-preparation.sh

http://172.42.42.100:10256/


sudo socat TCP-LISTEN:80 TCP:10.99.80.83:80
sudo socat TCP-LISTEN:83,reuseaddr,fork TCP:10.43.130.86:80

https://docs.k3s.io/installation/network-options

curl -sfL https://get.k3s.io | K3S_URL=https://dmarceliS:6443 K3S_TOKEN=K10c8a1969d4f1337ce9e6c16f9e33e6087e6c0c41ddf9e5b6e53a4dc0c2c6e9222::server:f24da592bd5e336d4dbe5a6dac6c2afa sh -

 curl -sfL https://get.k3s.io | K3S_URL=https://dmarcelis:6443 K3S_TOKEN=K10c8a1969d4f1337ce9e6c16f9e33e6087e6c0c41ddf9e5b6e53a4dc0c2c6e9222::server:f24da592bd5e336d4dbe5a6dac6c2afa K3S_NODE_NAME=dmarcelis sh -

 https://docs.k3s.io/cluster-access
 https://github.com/traefik/traefik/blob/master/docs/content/getting-started/quick-start-with-kubernetes.md

https://blog.differentpla.net/blog/2023/01/06/traefik-dashboard/
 
 curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
 chmod 700 get_helm.sh
 ./get_helm.sh
 #helm uninstall traefik --kubeconfig /etc/rancher/k3s/k3s.yaml -n kube-system

 https://github.com/k3s-io/k3s/issues/1613#issuecomment-647295522







p2

 âžœ  p1 git:(main) âœ— curl -H "Host: app1.com"  http://192.168.56.110/


 
p3

kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
kubectl port-forward argocd-server-5985b6cf6f-l27sw -n argocd 9999:8080
https://opensource.com/article/21/7/automating-argo-cd


http://192.168.56.110:80/ -> argo-cd-42.ncameiri:80



ao criar a app
application name -> 42-app
repository url -> https://github.com/ncameiri/ncameiri_argocd_sync.git
revision HEAD
Path app-control



###EM TESTES
./kubectl exec -it -n argocd deploy/argocd-server -- bash

git clone https://github.com/ncameiri/ncameiri_argocd_sync.git
./kubectl apply -f /home/vagrant/ncameiri_argocd_sync/app-control/test-app.yaml

Bonus

https://docs.gitlab.com/charts/installation/

https://zhimin-wen.medium.com/gitlab-on-onprem-kubernetes-icp-3-1-b06dcd09df7c

helm repo add gitlab https://charts.gitlab.io/
helm repo update
helm upgrade --install gitlab gitlab/gitlab \
 --cleanup-on-fail   --atomic  \
  --set global.hosts.domain=172.18.0.2.nip.io \
  --set global.hosts.externalIP=172.18.0.2 \
  --set postgresql.image.tag=13.6.0 \
    --set certmanager-issuer.email=me@example.com 
  
  
   --cleanup-on-fail   --atomic  \
   --set global.ingress.enabled=true \
  --set nginx-ingress.enabled=false \
  --set certmanager.install=false \
  --set global.ingress.configureCertmanager=false \
  --set gitlab-runner.install=false \
  --set global.hosts.https=true \
  --set global.ingress.class= \
  --set prometheus.install=false 


######Bonus a 15Jan

A partir do docker da maq

helm upgrade --install gitlab gitlab/gitlab \
  --timeout 600s \
  --set global.hosts.domain=ncameiri.42 \
  --set global.hosts.externalIP=127.0.0.1 \
  --set certmanager-issuer.email=me@example.com \
  --set gitlab-runner.install=false \
  --set nginx-ingress.enabled=false 

#################


INSTALAÃ‡Ã‚O TESTADA:

helm upgrade --install gitlab gitlab/gitlab     --set global.hosts.domain=127.0.0.1   --set global.hosts.externalIP=172.18.0.2   --set postgresql.image.tag=13.6.0     --set certmanager-issuer.email=me@example.com --set gitlab-runner.install=true  --set nginx-ingress.enabled=false 

kubectl port-forward gitlab-webservice-default-5cb549878c-45lm4 9001:8080


CustomizaÃ§Ãµes ðŸ”¨ðŸ”¨
alterar o ingressClassName para traefik

kubectl patch ing gitlab-webservice-default -p '{"spec": {"ingressClassName": "traefik"}}'

$KUBERNETES_IP

#kubectl patch ing gitlab-webservice-default -p '{"spec": {"tls": [{"hosts":["$KUBERNETES_IP"], "secretName": "gitlab-gitlab-tls"}]}}'

kubectl patch ing gitlab-webservice-default -p '{"spec": {"tls": [{"hosts":["172.18.0.2"], "secretName": "gitlab-gitlab-tls"}]}}'


kubectl  patch ing gitlab-webservice-default -p '{"spec":{"rules":[{"host":"","http":{"paths":[{"backend":{"service":{ "name":"gitlab-webservice-default","port":{"number":8181 }}},"path": "/", "pathType": "Prefix"}]}}]}}'  


Ã© preciso customizar nos /etc/hosts
172.18.0.2 gitlab.127.0.0.1

Novos Users requerem aprovaÃ§Ã£o entrar com root e a pass:
kubectl  get secret gitlab-gitlab-initial-root-password -o jsonpath="{.data.password}" | base64 -d

Ainda tem de se ver se Ã© possivel fazer certificado CAfile + CRLfile para verificar o git
git -c http.sslVerify=false clone https://gitlab.127.0.0.1/root/gitlab_test.git

